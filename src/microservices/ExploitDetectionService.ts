import { ethers } from 'ethers';
import { VulnerableBank } from '../../typechain-types';

export class ExploitDetectionService {
  private provider: ethers.Provider;
  private contract: VulnerableBank;
  private contractAddress: string;

  constructor(provider: ethers.Provider, contract: VulnerableBank) {
    this.provider = provider;
    this.contract = contract;
    this.contractAddress = '';
  }

  async startMonitoring() {
    console.log('Starting to monitor for potential exploits...');
    
    try {
      this.contractAddress = await this.contract.getAddress();
      console.log('Monitoring contract at address:', this.contractAddress);

      // Monitor pending transactions
      this.provider.on('pending', (txHash) => {
        this.handlePendingTransaction(txHash).catch(console.error);
      });

      // Listen for Withdrawal events
      const withdrawalFilter = this.contract.filters.Withdrawal();
      this.contract.on(withdrawalFilter, (user, amount, event) => {
        this.checkForReentrancy(event.transactionHash).catch(console.error);
      });

      console.log('Exploit detection monitoring set up successfully');
    } catch (error) {
      console.error('Error setting up exploit detection monitoring:', error);
    }
  }

  private async handlePendingTransaction(txHash: string) {
    try {
      const tx = await this.provider.getTransaction(txHash);
      if (tx && tx.to?.toLowerCase() === this.contractAddress.toLowerCase()) {
        console.log(`Potential exploit attempt detected in pending transaction:
          Hash: ${txHash}
          From: ${tx.from}
          To: ${tx.to}
          Value: ${ethers.formatEther(tx.value)} ETH
        `);
      }
    } catch (error) {
      console.error(`Error handling pending transaction ${txHash}:`, error);
    }
  }

  private async checkForReentrancy(txHash: string) {
    try {
      const receipt = await this.provider.getTransactionReceipt(txHash);
      if (receipt) {
        const withdrawalEvents = receipt.logs.filter(log => 
          log.address.toLowerCase() === this.contractAddress.toLowerCase() &&
          log.topics[0] === this.contract.interface.getEvent('Withdrawal')?.topicHash
        );

        if (withdrawalEvents.length > 1) {
          console.log(`ALERT: Potential reentrancy attack detected!
            Transaction Hash: ${txHash}
            Number of withdrawals: ${withdrawalEvents.length}
          `);
        }
      }
    } catch (error) {
      console.error(`Error checking for reentrancy in transaction ${txHash}:`, error);
    }
  }
}